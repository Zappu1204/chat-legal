services:
  # PostgreSQL Database
  postgres:
    image: postgres:latest
    container_name: chat-postgres
    environment:
      POSTGRES_DB: chat
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - chat-network

  # Ollama
  ollama:
    image: ollama/ollama:latest
    container_name: chat-ollama
    volumes:
      - ollama_data:/root/.ollama
    ports:
      - "11434:11434"
    networks:
      - chat-network
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: all
    #           capabilities: [gpu]

  # Python FastAPI Backend (RAG Service)
  server-py:
    build:
      context: .
      dockerfile: deployment/Dockerfile.server_py
    container_name: chat-server-py
    image: giapcn/chat-server-py:1.0.0
    volumes:
      - ./server_py:/app
    environment:
      - POSTGRES_SERVER=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=chat
      - POSTGRES_PORT=5432
      - OLLAMA_API_URL=http://ollama:11434/api
      - OLLAMA_API_BASE=http://ollama:11434
      - OLLAMA_API_TIMEOUT=60
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      ollama:
        condition: service_started
    networks:
      - chat-network

  # ReactJS Frontend
  client:
    build:
      context: .
      dockerfile: deployment/Dockerfile.client
      args:
        - VITE_API_BASE_URL=/api
        - VITE_RAG_API_URL=/api
        - BUILDPLATFORM=linux/amd64
    container_name: chat-client
    image: giapcn/chat-client:1.0.0
    ports:
      - "80:80"
    depends_on:
      - server-py
    networks:
      - chat-network

networks:
  chat-network:
    driver: bridge

volumes:
  postgres_data:
  ollama_data:
